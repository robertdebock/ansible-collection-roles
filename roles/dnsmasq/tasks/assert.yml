---

- name: assert | Test if dnsmasq_port is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_port is number
      - dnsmasq_port >= 0
      - dnsmasq_port <= 65536
    quiet: yes
  when:
    - dnsmasq_port is defined

- name: assert | Test if dnsmasq_domain_needed is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_domain_needed is defined
      - dnsmasq_domain_needed is boolean
    quiet: yes

- name: assert | Test if dnsmasq_bogus_priv is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_bogus_priv is defined
      - dnsmasq_bogus_priv is boolean
    quiet: yes

- name: assert | Test if dnsmasq_conf_file is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_conf_file is defined
      - dnsmasq_conf_file is string
      - dnsmasq_conf_file is not none
    quiet: yes

- name: assert | Test if dnsmasq_dnssec is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_dnssec is defined
      - dnsmasq_dnssec is boolean
    quiet: yes

- name: assert | Test if dnsmasq_dnssec_check_unsigned is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_dnssec_check_unsigned is defined
      - dnsmasq_dnssec_check_unsigned is boolean
    quiet: yes

- name: assert | Test if dnsmasq_filterwin2k is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_filterwin2k is defined
      - dnsmasq_filterwin2k is boolean
    quiet: yes

- name: assert | Test if dnsmasq_strict_order is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_strict_order is defined
      - dnsmasq_strict_order is boolean
    quiet: yes

- name: assert | Test if dnsmasq_no_resolv is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_no_resolv is defined
      - dnsmasq_no_resolv is boolean
    quiet: yes

- name: assert | Test if dnsmasq_no_poll is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_no_poll is defined
      - dnsmasq_no_poll is boolean
    quiet: yes

- name: assert | Test if dnsmasq_servers is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_servers is iterable
    quiet: yes
  when:
    - dnsmasq_servers is defined

- name: assert | Test if item in dnsmasq_servers is set correctly
  ansible.builtin.assert:
    that:
      - item.nameserver is defined
      - item.nameserver is string
      - item.nameserver is not none
    quiet: yes
  loop: "{{ dnsmasq_servers }}"
  when:
    - dnsmasq_servers is defined

- name: assert | Test if item.domain in dnsmasq_servers is set correctly
  ansible.builtin.assert:
    that:
      - item.domain is string
      - item.domain is not none
    quiet: yes
  loop: "{{ dnsmasq_servers }}"
  when:
    - dnsmasq_servers is defined
    - item.domain is defined

- name: assert | Test if item.port in dnsmasq_servers is set correctly
  ansible.builtin.assert:
    that:
      - item.port is number
      - item.port >= 0
      - item.port <= 65536
    quiet: yes
  loop: "{{ dnsmasq_servers }}"
  when:
    - dnsmasq_servers is defined
    - item.port is defined

- name: assert | Test if dnsmasq_locals is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_locals is iterable
    quiet: yes
  when:
    - dnsmasq_locals is defined

- name: assert | Test if item.domain in dnsmasq_locals is set correctly
  ansible.builtin.assert:
    that:
      - item.domain is defined
      - item.domain is string
      - item.domain is not none
    quiet: yes
  when:
    - dnsmasq_locals is defined

- name: assert | Test if dnsmasq_addresses is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_addresses is iterable
    quiet: yes
  when:
    - dnsmasq_addresses is defined

- name: assert | Test if item in dnsmasq_addresses is set correctly
  ansible.builtin.assert:
    that:
      - item.domain is defined
      - item.domain is string
      - item.domain is not none
      - item.address is defined
      - item.address is string
      - item.address is not none
    quiet: yes
  loop: "{{ dnsmasq_addresses }}"
  when:
    - dnsmasq_addresses is defined

- name: assert | Test if dnsmasq_ipsets is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_ipsets is iterable
    quiet: yes
  when:
    - dnsmasq_ipsets is defined

- name: assert | Test if item in dnsmasq_ipsets is set correctly
  ansible.builtin.assert:
    that:
      - item.domains is defined
      - item.domains is iterable
      - item.destination is defined
      - item.destination is string
      - item.destination is not none
      - item.option is defined
      - item.option is string
      - item.option is not none
    quiet: yes
  loop: "{{ dnsmasq_ipsets }}"
  when:
    - dnsmasq_ipsets is defined

- name: assert | Test if dnsmasq_interfaces is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_interfaces is iterable
    quiet: yes
  when:
    - dnsmasq_interfaces is defined

- name: assert | Test if item in dnsmasq_interfaces is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
    quiet: yes
  loop: "{{ dnsmasq_interfaces }}"
  when:
    - dnsmasq_interfaces is defined

- name: assert | Test if dnsmasq_listen_addresses is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_listen_addresses is iterable
    quiet: yes
  when:
    - dnsmasq_listen_addresses is defined
    - dnsmasq_listen_addresses is string

- name: assert | Test if item in dnsmasq_listen_addresses is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
    quiet: yes
  loop: "{{ dnsmasq_listen_addresses }}"
  when:
    - dnsmasq_listen_addresses is defined

- name: assert | Test if dnsmasq_no_dhcp_interface is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_no_dhcp_interface is defined
      - dnsmasq_no_dhcp_interface is string
      - dnsmasq_no_dhcp_interface is not none
    quiet: yes

- name: assert | Test if dnsmasq_local_service is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_local_service is defined
      - dnsmasq_local_service is boolean
    quiet: yes

- name: assert | Test if dnsmasq_bind_interfaces is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_bind_interfaces is defined
      - dnsmasq_bind_interfaces is boolean
    quiet: yes

- name: assert | Test if dnsmasq_no_hosts is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_no_hosts is defined
      - dnsmasq_no_hosts is boolean
    quiet: yes

- name: assert | Test if dnsmasq_expand_hosts is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_expand_hosts is defined
      - dnsmasq_expand_hosts is boolean
    quiet: yes

- name: assert | Test if dnsmasq_domains is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_domains is iterable
    quiet: yes
  when:
    - dnsmasq_domains is defined

- name: assert | Test if item.name in dnsmasq_domains is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
    quiet: yes
  loop: "{{ dnsmasq_domains }}"
  when:
    - dnsmasq_domains is defined

- name: assert | Test if dnsmasq_dhcp_ranges is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_dhcp_ranges is iterable
    quiet: yes
  when:
    - dnsmasq_dhcp_ranges is defined

- name: assert | Test if item.from in dnsmasq_dhcp_ranges  is set correctly
  ansible.builtin.assert:
    that:
      - item.from is defined
      - item.from is string
      - item.from is not none
    quiet: yes
  when:
    - dnsmasq_dhcp_ranges is defined
  loop: "{{ dnsmasq_dhcp_ranges }}"

- name: assert | Test if item.sets in dnsmasq_dhcp_ranges  is set correctly
  ansible.builtin.assert:
    that:
      - item.sets is iterabel
    quiet: yes
  when:
    - dnsmasq_dhcp_ranges is defined
    - item.sets is defined
  loop: "{{ dnsmasq_dhcp_ranges }}"

- name: assert | Test if item.tags in dnsmasq_dhcp_ranges  is set correctly
  ansible.builtin.assert:
    that:
      - item.tags is iterable
    quiet: yes
  when:
    - dnsmasq_dhcp_ranges is defined
    - item.tags is defined
  loop: "{{ dnsmasq_dhcp_ranges }}"

- name: assert | Test if item.options in dnsmasq_dhcp_ranges  is set correctly
  ansible.builtin.assert:
    that:
      - item.options is iterable
    quiet: yes
  when:
    - dnsmasq_dhcp_ranges is defined
    - item.options is defined
  loop: "{{ dnsmasq_dhcp_ranges }}"

- name: assert | Test if dnsmasq_enable_ra is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_enable_ra is defined
      - dnsmasq_enable_ra is boolean
    quiet: yes

- name: assert | Test if dnsmasq_hosts is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_hosts is iterable
    quiet: yes
  when:
    - dnsmasq_hosts is defined

- name: assert | Test if items in dnsmasq_hosts are set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.value is defined
      - item.value is not none
    quiet: yes
  loop: "{{ dnsmasq_hosts }}"
  when:
    - dnsmasq_hosts is defined

- name: assert | Test if dnsmasq_read_ethers is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_read_ethers is defined
      - dnsmasq_read_ethers is boolean
    quiet: yes

- name: assert | Test if dnsmasq_dhcp_options is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_dhcp_options is iterable
    quiet: yes
  when:
    - dnsmasq_dhcp_options is defined

- name: assert | Test if items in dnsmasq_dhcp_options are set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.value is defined
      - item.value is not none
    quiet: yes
  loop: "{{ dnsmasq_dhcp_options }}"
  when:
    - dnsmasq_dhcp_options is defined

- name: assert | Test if dnsmasq_dhcp_option_force is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_dhcp_option_force is iterable
    quiet: yes
  when:
    - dnsmasq_dhcp_option_force is defined

- name: assert | Test if items in dnsmasq_dhcp_option_force are set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.value is defined
      - item.value is not none
    quiet: yes
  loop: "{{ dnsmasq_dhcp_option_force }}"
  when:
    - dnsmasq_dhcp_option_force is defined

- name: assert | Test if dnsmasq_enable_tftp is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_enable_tftp is defined
      - dnsmasq_enable_tftp is boolean
    quiet: yes

- name: assert | Test if dnsmasq_tftp_no_fail is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_tftp_no_fail is defined
      - dnsmasq_tftp_no_fail is boolean
    quiet: yes

- name: assert | Test if dnsmasq_tftp_secure is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_tftp_secure is defined
      - dnsmasq_tftp_secure is boolean
    quiet: yes

- name: assert | Test if dnsmasq_tftp_no_blocksize is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_tftp_no_blocksize is defined
      - dnsmasq_tftp_no_blocksize is boolean
    quiet: yes

- name: assert | Test if dnsmasq_dhcp_lease_max is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_dhcp_lease_max is number
      - dnsmasq_dhcp_lease_max >= 0
    quiet: yes
  when:
    - dnsmasq_dhcp_lease_max is defined

- name: assert | Test if dnsmasq_dhcp_authoritative is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_dhcp_authoritative is defined
      - dnsmasq_dhcp_authoritative is boolean
    quiet: yes

- name: assert | Test if dnsmasq_dhcp_rapid_commit is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_dhcp_rapid_commit is defined
      - dnsmasq_dhcp_rapid_commit is boolean
    quiet: yes

- name: assert | Test if dnsmasq_dhcp_script is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_dhcp_script is defined
      - dnsmasq_dhcp_script is string
      - dnsmasq_dhcp_script is not none
    quiet: yes

- name: assert | Test if dnsmasq_cache_size is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_cache_size is number
      - dnsmasq_cache_size >= 0
    quiet: yes
  when:
    - dnsmasq_cache_size is defined

- name: assert | Test if dnsmasq_no_negcache is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_no_negcache is defined
      - dnsmasq_no_negcache is boolean
    quiet: yes

- name: assert | Test if dnsmasq_local_ttl is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_local_ttl is number
      - dnsmasq_local_ttl >= 0
    quiet: yes
  when:
    - dnsmasq_local_ttl is defined

- name: assert | Test if dnsmasq_aliases is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_aliases is iterable
    quiet: yes
  when:
    - dnsmasq_aliases is defined

- name: assert | Test if items in dnsmasq_aliases are set correctly
  ansible.builtin.assert:
    that:
      - item.from is defined
      - item.from is string
      - item.from is not none
      - item.until is defined
      - item.until is string
      - item.until is not none
    quiet: yes
  loop: "{{ dnsmasq_aliases }}"
  when:
    - dnsmasq_aliases is defined

- name: assert | Test if dnsmasq_mx_hosts is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_mx_hosts is iterable
    quiet: yes
  when:
    - dnsmasq_mx_hosts is defined

- name: assert | Test if item.domain in dnsmasq_mx_hosts is set correctly
  ansible.builtin.assert:
    that:
      - item.domain is defined
      - item.domain is string
      - item.domain is not none
    quiet: yes
  loop: "{{ dnsmasq_mx_hosts }}"
  when:
    - dnsmasq_mx_hosts is defined

- name: assert | Test if dnsmasq_localmx is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_localmx is defined
      - dnsmasq_localmx is boolean
    quiet: yes

- name: assert | Test if dnsmasq_selfmx is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_selfmx is defined
      - dnsmasq_selfmx is boolean
    quiet: yes

- name: assert | Test if dnsmasq_src_hosts is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_src_hosts is iterable
    quiet: yes
  when:
    - dnsmasq_src_hosts is defined

- name: assert | Test if items in dnsmasq_src_hosts are set correctly
  ansible.builtin.assert:
    that:
      - item.record is defined
      - item.record is string
      - item.record is not none
      - item.destination is defined
      - item.destination is string
      - item.destination is not none
      - item.port is defined
      - item.port is number
    quiet: yes
  loop: "{{ dnsmasq_src_hosts }}"
  when:
    - dnsmasq_src_hosts is defined

- name: assert | Test if item.priority in dnsmasq_src_hosts is set correctly
  ansible.builtin.assert:
    that:
      - item.priority is number
      - item.priority >= 0
    quiet: yes
  when:
    - dnsmasq_src_hosts is defined
    - item.priority is defined

- name: assert | Test if dnsmasq_log_queries is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_log_queries is defined
      - dnsmasq_log_queries is boolean
    quiet: yes

- name: assert | Test if dnsmasq_log_dhcp is set correctly
  ansible.builtin.assert:
    that:
      - dnsmasq_log_dhcp is defined
      - dnsmasq_log_dhcp is boolean
    quiet: yes
