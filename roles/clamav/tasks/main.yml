---
# tasks file for clamav

- name: Import assert.yml
  ansible.builtin.import_tasks:
    file: assert.yml
  run_once: yes
  delegate_to: localhost

- name: Install clamav software
  ansible.builtin.package:
    name: "{{ clamav_packages }}"
    state: present
  notify:
    - Ensure logfiles exists
    - Stop clamav
    - Update virus definitions

- name: Manage selinux settings
  when:
    - ansible_selinux is defined
    - ansible_selinux.status == "enabled"
  block:
    - name: Allowing system virus scanning
      ansible.posix.seboolean:
        name: antivirus_can_scan_system
        state: yes
        persistent: yes

    - name: Allowing jit
      ansible.posix.seboolean:
        name: clamd_use_jit
        state: yes
        persistent: yes

    - name: Install required selinux software
      ansible.builtin.package:
        name: "{{ clamav_requirements }}"
        state: present

    - name: Place selinux type enforcement
      ansible.builtin.copy:
        src: my-clamd.te
        dest: /etc/my-clamd.te
        mode: "0640"
      notify:
        - Create selinux mod for clamav
        - Create selinux pp for clamav
        - Load selinux pp for clamav

- name: Place freshclam.conf
  ansible.builtin.template:
    src: freshclam.conf.j2
    dest: "{{ clamav_config_dir }}/freshclam.conf"
    mode: "{{ freshclam_mode }}"

- name: Create pid directory
  ansible.builtin.file:
    path: /run/clamav/
    state: directory
    owner: "{{ clamav_owner }}"
    group: "{{ clamav_group }}"
    mode: "0755"

- name: Create database directory
  ansible.builtin.file:
    path: "{{ clamav_database_directory }}"
    state: directory
    mode: "0755"

- name: Download signatures
  ansible.builtin.get_url:
    url: "{{ freshclam_private_mirrors[0] }}/{{ item }}"
    dest: "{{ clamav_database_directory }}/{{ item }}"
    mode: "0644"
  loop:
    - main.cvd
    - daily.cld

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Configure clamav software
  ansible.builtin.lineinfile:
    dest: "{{ clamav_config_dir }}/{{ clamav_config_file }}"
    line: "{{ item.line }}"
    create: yes
    state: "{{ item.state | default('present') }}"
    mode: "0640"
  loop: "{{ clamav_configuration }}"
  notify:
    - Restart clamav

- name: Check update virus definitions
  ansible.builtin.async_status:
    jid: "{{ updatevirusdefinitions.ansible_job_id }}"
  register: clamav_job_result
  until:
    - clamav_job_result.finished
  retries: 15
  delay: 60
  when:
    - updatevirusdefinitions is defined

- name: Start and enable clamav service
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ clamav_services }}"
