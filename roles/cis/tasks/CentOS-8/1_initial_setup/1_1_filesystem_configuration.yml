---
- name: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled (Scored)
  ansible.builtin.copy:
    content: "install cramfs /bin/true"
    dest: /etc/modprobe.d/cramfs.conf
    mode: "0644"
  when:
    - cis_cramfs_disabled | bool

- name: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled (Scored)
  community.general.modprobe:
    name: cramfs
    state: absent
  when:
    - cis_cramfs_disabled | bool
    - ansible_virtualization_type != "docker"

- name: 1.1.1.2 Ensure mounting of vFAT filesystems is limited (Not Scored)
  ansible.builtin.copy:
    content: "install vfat /bin/true"
    dest: /etc/modprobe.d/vfat.conf
    mode: "0644"
  when:
    - cis_vfat_disabled | bool

- name: 1.1.1.2 Ensure mounting of vFAT filesystems is limited (Not Scored)
  community.general.modprobe:
    name: vfat
    state: absent
  when:
    - cis_vfat_disabled | bool
    - ansible_virtualization_type != "docker"

- name: 1.1.1.3 Ensure mounting of squashfs filesystems is disabled (Scored)
  ansible.builtin.copy:
    content: "install squashfs /bin/true"
    dest: /etc/modprobe.d/squashfs.conf
    mode: "0644"
  when:
    - cis_squashfs_disabled | bool

- name: 1.1.1.3 Ensure mounting of squashfs filesystems is disabled (Scored)
  community.general.modprobe:
    name: squashfs
    state: absent
  when:
    - cis_squashfs_disabled | bool
    - ansible_virtualization_type != "docker"

- name: 1.1.1.4 Ensure mounting of udf filesystems is disabled (Scored)
  ansible.builtin.copy:
    content: "install udf /bin/true"
    dest: /etc/modprobe.d/udf.conf
    mode: "0644"
  when:
    - cis_udf_disabled | bool

- name: 1.1.1.4 Ensure mounting of udf filesystems is disabled (Scored)
  community.general.modprobe:
    name: udf
    state: absent
  when:
    - cis_udf_disabled | bool
    - ansible_virtualization_type != "docker"

- name: 1.1.2 Ensure /tmp is configured (Scored)
  ansible.builtin.service:
    name: tmp.mount
    state: started
    enabled: yes
  when:
    - cis_tmp_configured | bool

- name: 1.1.3 Ensure nodev option set on /tmp partition (Scored)
  ansible.builtin.command:
    cmd: grep nodev /usr/lib/systemd/system/tmp.mount
  failed_when:
    - no
  register: cis_tmp_nodev_output
  changed_when: no
  check_mode: no
  when:
    - cis_tmp_nodev | bool

- name: 1.1.3 Ensure nodev option set on /tmp partition (Scored)
  ansible.builtin.lineinfile:
    path: /usr/lib/systemd/system/tmp.mount
    mode: "0644"
    regexp: '^Options=(.*)'
    line: 'Options=\1,nodev'
    backrefs: yes
  notify:
    - reboot
  when:
    - cis_tmp_nodev | bool
    - cis_tmp_nodev_output.rc == 1

- name: 1.1.4 Ensure nosuid option set on /tmp partition (Scored)
  ansible.builtin.command:
    cmd: grep nosuid /usr/lib/systemd/system/tmp.mount
  failed_when:
    - no
  register: cis_tmp_nosuid_output
  changed_when: no
  check_mode: no
  when:
    - cis_tmp_nodev | bool

- name: 1.1.4 Ensure nosuid option set on /tmp partition (Scored)
  ansible.builtin.lineinfile:
    path: /usr/lib/systemd/system/tmp.mount
    mode: "0644"
    regexp: '^Options=(.*)'
    line: 'Options=\1,nosuid'
    backrefs: yes
  notify:
    - reboot
  when:
    - cis_tmp_nosuid | bool
    - cis_tmp_nosuid_output.stdout | length < 1

- name: 1.1.5 Ensure noexec option set on /tmp partition (Scored)
  ansible.builtin.command:
    cmd: grep noexec /usr/lib/systemd/system/tmp.mount
  failed_when:
    - no
  register: cis_tmp_noexec_output
  changed_when: no
  check_mode: no
  when:
    - cis_tmp_noexec | bool

- name: 1.1.5 Ensure noexec option set on /tmp partition (Scored)
  ansible.builtin.lineinfile:
    path: /usr/lib/systemd/system/tmp.mount
    mode: "0644"
    regexp: '^Options=(.*)'
    line: 'Options=\1,noexec'
    backrefs: yes
  when:
    - cis_tmp_noexec | bool
    - cis_tmp_noexec_output.stdout | length < 1
  notify:
    - reboot

- name: 1.1.6 Ensure separate partition exists for /var (Scored)
  ansible.builtin.shell:
    cmd: set -o pipefail && mount | grep -E '\s/var\s'
  register: cis_var
  failed_when:
    - cis_var | length != 1
  changed_when: no
  check_mode: no
  when:
    - cis_var_partition | bool

- name: 1.1.7 Ensure separate partition exists for /var/tmp (Scored)
  ansible.builtin.shell:
    cmd: set -o pipefail && mount | grep /var/tmp
  register: cis_var_tmp
  failed_when:
    - cis_var_tmp | length != 1
  changed_when: no
  check_mode: no
  when:
    - cis_var_tmp_partition | bool

- name: 1.1.8 Ensure nodev option set on /var/tmp partition (Scored)
  ansible.posix.mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nodev"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_var_tmp_nodev | bool
    - item.mount == "/var/tmp"
    - item.options.find(",") >= 0
    - item.options.find("nodev") == -1
  notify:
    - systemctl daemon-reload
    - remount /var/tmp

- name: 1.1.9 Ensure nosuid option set on /var/tmp partition (Scored)
  ansible.posix.mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nosuid"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_var_tmp_nosuid | bool
    - item.mount == "/var/tmp"
    - item.options.find(",") >= 0
    - item.options.find("nosuid") == -1
  notify:
    - systemctl daemon-reload
    - remount /var/tmp

- name: 1.1.10 Ensure noexec option set on /var/tmp partition (Scored)
  ansible.posix.mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},noexec"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_var_tmp_noexec | bool
    - item.mount == "/var/tmp"
    - item.options.find(",") >= 0
    - item.options.find("noexec") == -1
  notify:
    - systemctl daemon-reload
    - remount /var/tmp

- name: 1.1.11 Ensure separate partition exists for /var/log (Scored)
  ansible.builtin.shell:
    cmd: set -o pipefail && mount | grep -E '\s/var/log\s'
  changed_when: no
  register: cis_var_log
  failed_when:
    - cis_var_log | length != 1
  when:
    - cis_var_log_partition | bool

- name: 1.1.12 Ensure separate partition exists for /var/log/audit (Scored)
  ansible.builtin.shell:
    cmd: set -o pipefail && mount | grep -E '\s/var/log/audit\s'
  changed_when: no
  register: cis_var_log_audit
  failed_when:
    - cis_var_log_audit | length != 1
  when:
    - cis_var_log_audit_partition | bool

- name: 1.1.13 Ensure separate partition exists for /home (Scored)
  ansible.builtin.shell:
    cmd: set -o pipefail && mount | grep -E '\s/home\s'
  changed_when: no
  register: cis_home_audit
  failed_when:
    - cis_home_audit | length != 1
  when:
    - cis_home_partition | bool

- name: 1.1.14 Ensure nodev option set on /home partition (Scored)
  ansible.posix.mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nodev"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_home_nodev | bool
    - item.mount == "/home"
    - item.options.find(",") >= 0
    - item.options.find("nodev") == -1
  notify:
    - systemctl daemon-reload
    - remount /home

- name: 1.1.15 Ensure nodev option set on /dev/shm partition (Scored)
  ansible.builtin.command:
    cmd: awk '$2 == "/dev/shm" { print $4 }' /proc/mounts
  changed_when: no
  check_mode: no
  register: cis_dev_shm_nodev_test
  when:
    - cis_dev_shm_nodev | bool

- name: 1.1.15 Ensure nodev option set on /dev/shm partition (Scored)
  ansible.posix.mount:
    name: /dev/shm
    src: tmpfs
    fstype: tmpfs
    opts: "{{ cis_dev_shm_nodev_test.stdout }},nodev"
    state: present
  when:
    - cis_dev_shm_nodev | bool
    - '"nodev" not in cis_dev_shm_nodev_test.stdout'
  notify:
    - systemctl daemon-reload
    - remount /dev/shm with nodev

- name: 1.1.16 Ensure nosuid option set on /dev/shm partition (Scored)
  ansible.builtin.command:
    cmd: awk '$2 == "/dev/shm" { print $4 }' /proc/mounts
  changed_when: no
  check_mode: no
  register: cis_dev_shm_nosuid_test
  when:
    - cis_dev_shm_nosuid | bool

- name: 1.1.16 Ensure nosuid option set on /dev/shm partition (Scored)
  ansible.posix.mount:
    name: /dev/shm
    src: tmpfs
    fstype: tmpfs
    opts: "{{ cis_dev_shm_nosuid_test.stdout }},nosuid"
    state: present
  when:
    - cis_dev_shm_nosuid | bool
    - '"nosuid" not in cis_dev_shm_nosuid_test.stdout'
  notify:
    - systemctl daemon-reload
    - remount /dev/shm with nosuid

- name: 1.1.17 Ensure noexec option set on /dev/shm partition (Scored)
  ansible.builtin.command:
    cmd: awk '$2 == "/dev/shm" { print $4 }' /proc/mounts
  changed_when: no
  check_mode: no
  register: cis_dev_shm_noexec_test
  when:
    - cis_dev_shm_noexec | bool

- name: 1.1.17 Ensure noexec option set on /dev/shm partition (Scored)
  ansible.posix.mount:
    name: /dev/shm
    src: tmpfs
    fstype: tmpfs
    opts: "{{ cis_dev_shm_noexec_test.stdout }},noexec"
    state: present
  when:
    - cis_dev_shm_noexec | bool
    - '"noexec" not in cis_dev_shm_noexec_test.stdout'
  notify:
    - systemctl daemon-reload
    - remount /dev/shm with noexec

- name: 1.1.18 Ensure nodev option set on removable media partitions (Not Scored)
  ansible.builtin.shell:
    cmd: set -o pipefail && mount | grep -E '\s{{ item }}\s' | grep -v nodev
  register: output
  when:
    - cis_removable_media_nodev | bool
  failed_when:
    - output.stdout_lines | length > 0
  changed_when: no
  check_mode: no
  loop: "{{ cis_removable_media_partitions }}"

- name: 1.1.19 Ensure nosuid option set on removable media partitions (Not Scored)
  ansible.builtin.shell:
    cmd: set -o pipefail && mount | grep -E '\s{{ item }}\s' | grep -v nosuid
  register: output
  when:
    - cis_removable_media_nosuid | bool
  failed_when:
    - output.stdout_lines | length > 0
  changed_when: no
  check_mode: no
  loop: "{{ cis_removable_media_partitions }}"

- name: 1.1.20 Ensure noexec option set on removable media partitions (Not Scored)
  ansible.builtin.shell:
    cmd: set -o pipefail && mount | grep -E '\s{{ item }}\s' | grep -v noexec
  register: output
  when:
    - cis_removable_media_noexec | bool
  failed_when:
    - output.stdout_lines | length > 0
  changed_when: no
  check_mode: no
  loop: "{{ cis_removable_media_partitions }}"

- name: 1.1.21 Ensure sticky bit is set on all world-writable directories (Scored)
  ansible.builtin.command:
    cmd: find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print
  when:
    - cis_fix_sticky_bit | bool
  changed_when: no
  check_mode: no
  register: cis_world_writable_directories

- name: 1.1.21 Ensure sticky bit is set on all world-writable directories (Scored)
  ansible.builtin.file:
    path: "{{ item }}"
    mode: "a+t"
  when:
    - cis_fix_sticky_bit | bool
    - cis_world_writable_directories.stdout | length > 0
  loop: "{{ cis_world_writable_directories.stdout_lines }}"

- name: 1.1.22 Disable Automounting (Scored)
  ansible.builtin.service:
    name: autofs
    state: stopped
    enabled: yes
  when:
    - cis_disable_automount | bool
    - services.autofs is defined

- name: 1.1.23 Disable USB Storage (Scored)
  ansible.builtin.copy:
    content: "install usb-storage /bin/true"
    dest: /etc/modprobe.d/usb-storage.conf
    mode: "0644"
  when:
    - cis_usb_storage_disabled | bool

- name: 1.1.23 Disable USB Storage (Scored)
  community.general.modprobe:
    name: usb-storage
    state: absent
  when:
    - cis_usb_storage_disabled | bool
    - ansible_virtualization_type != "docker"
