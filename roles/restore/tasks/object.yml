---

- name: object | Find most recent object
  ansible.builtin.find:
    paths: "{{ restore_directory }}/{{ inventory_hostname }}"
    patterns: "{{ object.type }}-{{ object.name }}-*"
  register: restore_found_files
  delegate_to: localhost
  become: false

- name: object | Select latest_file in restore_found_files
  ansible.builtin.set_fact:
    latest_file: "{{ restore_found_files.files | sort(attribute='mtime') | last }}"
  when:
    - restore_found_files.files | length

- name: object | Copy latest_file
  ansible.builtin.copy:
    src: "{{ latest_file.path }}"
    dest: "{{ restore_remote_directory }}/{{ latest_file.path | basename }}"
    mode: "0644"
  when:
    - latest_file is defined

- name: object | Unarchive directory object
  ansible.builtin.command:
    cmd: unzip "{{ restore_remote_directory }}/{{ latest_file.path | basename }}"  # noqa command-instead-of-module
  when:
    - latest_file is defined
    - object.type == "directory"
  changed_when: true

- name: object | Find extension
  ansible.builtin.set_fact:
    latest_file_extension: "{{ latest_file.path | basename | splitext | last }}"
  when:
    - latest_file is defined
    - object.type == "mysql"

- name: object | Unarchive mysql object
  ansible.builtin.unarchive:
    src: "{{ restore_remote_directory }}/{{ latest_file.path | basename }}"
    dest: "{{ restore_remote_directory }}"
    exclude: "{{ object.exclude | default(omit) }}"
    remote_src: true
    mode: "0755"
  when:
    - latest_file is defined
    - object.type == "mysql"
    - latest_file_extension in [ ".gz", ".tgz", ".tar", ".zip" ]

- name: object | Import mysql database
  community.mysql.mysql_db:
    name: "{{ object.destination }}"
    target: "{{ restore_remote_directory }}/{{ latest_file.path | basename | splitext | first }}.sql"
    login_unix_socket: "{{ restore_mysql_socket }}"
    login_user: "{{ restore_mysql_username | default(omit) }}"
    login_password: "{{ restore_mysql_password | default(omit) }}"
    state: import
  when:
    - latest_file is defined
    - object.type == "mysql"

- name: object | Unarchive postgres object
  ansible.builtin.unarchive:
    src: "{{ restore_remote_directory }}/{{ latest_file.path | basename }}"
    dest: "{{ restore_remote_directory }}"
    exclude: "{{ object.exclude | default(omit) }}"
    remote_src: true
    mode: "0755"
  when:
    - latest_file is defined
    - object.type == "postgres"
    - latest_file_extension in [ ".gz", ".tgz", ".tar", ".zip" ]

- name: object | Import postgres database
  community.postgresql.postgresql_db:
    name: "{{ object.destination }}"
    target: "{{ restore_remote_directory }}/{{ latest_file.path | basename | splitext | first }}.sql"
    state: restore
  become_user: postgres
  become: true
  when:
    - latest_file is defined
    - object.type == "mysql"
