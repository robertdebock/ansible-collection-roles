---

- name: assert | Test if haproxy_stats is set correctly
  ansible.builtin.assert:
    that:
      - haproxy_stats is defined
      - haproxy_stats is boolean
    quiet: yes

- name: assert | Test if haproxy_stats_port is set correctly
  ansible.builtin.assert:
    that:
      - haproxy_stats_port is defined
      - haproxy_stats_port is number
      - haproxy_stats_port > 0
      - haproxy_stats_port < 65536
    quiet: yes

- name: assert | Test if haproxy_stats_bind_addr is set correctly
  ansible.builtin.assert:
    that:
      - haproxy_stats_bind_addr is defined
      - haproxy_stats_bind_addr is string
      - haproxy_stats_bind_addr is not none
    quiet: yes

- name: assert | Test if haproxy_retries is set correctly
  ansible.builtin.assert:
    that:
      - haproxy_retries is defined
      - haproxy_retries is number
      - haproxy_retries >= 0
    quiet: yes

- name: assert | Test if timeouts are set correctly
  ansible.builtin.assert:
    that:
      - item is defined
      - item is string
      - item is not none
    quiet: yes
  loop:
    - "{{ haproxy_timeout_http_request }}"
    - "{{ haproxy_timeout_connect }}"
    - "{{ haproxy_timeout_client }}"
    - "{{ haproxy_timeout_server }}"
    - "{{ haproxy_timeout_http_keep_alive }}"
    - "{{ haproxy_timeout_check }}"

- name: assert | Test if haproxy_maxconn is set correctly
  ansible.builtin.assert:
    that:
      - haproxy_maxconn is defined
      - haproxy_maxconn is number
      - haproxy_maxconn > 0
    quiet: yes

- name: assert | Test if haproxy_frontends is set correctly
  ansible.builtin.assert:
    that:
      - haproxy_frontends is defined
      - haproxy_frontends is iterable
    quiet: yes

- name: assert | Test if item in haproxy_frontends is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - item.address is defined
      - item.address is string
      - item.address is not none
      - item.port is defined
      - item.port is number
      - item.port > 0
      - item.port < 65536
      - item.default_backend is defined
      - item.default_backend is string
      - item.default_backend is not none
    quiet: yes
  loop: "{{ haproxy_frontends }}"
  loop_control:
    label: "{{ item.name }}"

- name: assert | Test if item in haproxy_frontends with ssl is set correctly
  ansible.builtin.assert:
    that:
      - item.ssl is boolean
      - item.crts is defined
      - item.crts is iterable
    quiet: yes
  loop: "{{ haproxy_frontends }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.ssl is defined

- name: assert | Test if optional item haproxy_frontends is set correctly
  ansible.builtin.assert:
    that:
      - item.mode is string
      - item.mode in [ "http", "tcp" ]
    quiet: yes
  loop: "{{ haproxy_frontends }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.mode is defined

- name: assert | Test if haproxy_backends is set correctly
  ansible.builtin.assert:
    that:
      - haproxy_backends is defined
      - haproxy_backends is iterable
    quiet: yes

- name: assert | Test if haproxy_backend_default_balance is set correctly
  ansible.builtin.assert:
    that:
      - haproxy_backend_default_balance is defined
      - haproxy_backend_default_balance is string
      - haproxy_backend_default_balance in [ "roundrobin", "static-rr", "leastconn", "first", "source", "uri", "url_param", "hdr", "rdp-cookie" ]
    quiet: yes

- name: assert | Test if item in haproxy_backends is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
      - item.name is not none
      - (item.balance is defined
        and item.balance is string
        and item.balance in [ "roundrobin", "static-rr", "leastconn", "first", "source", "uri", "url_param", "hdr", "rdp-cookie" ])
        or item.balance is undefined
      - item.servers is defined
      - item.servers is iterable
      - item.port is defined
      - item.port is number
      - item.port > 0
      - item.port < 65536
      - (item.options is defined and item.options is iterable) or item.options is undefined
    quiet: yes
  loop: "{{ haproxy_backends }}"
  loop_control:
    label: "{{ item.name }}"

- name: assert | Test if optional item haproxy_backends is set correctly
  ansible.builtin.assert:
    that:
      - item.mode is string
      - item.mode in [ "http", "tcp" ]
    quiet: yes
  loop: "{{ haproxy_backends }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.mode is defined

- name: assert | Test if httpcheck item in haproxy_backends is set correctly
  ansible.builtin.assert:
    that:
      - item.httpcheck is boolean
    quiet: yes
  loop: "{{ haproxy_backends }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.httpcheck is defined

- name: assert | Test if httpcheck_method item in haproxy_backends is set correctly
  ansible.builtin.assert:
    that:
      - item.httpcheck_method is string
      - item.httpcheck_method is not none
      - item.httpcheck is defined
    quiet: yes
  loop: "{{ haproxy_backends }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.httpcheck_method is defined

- name: assert | Test if http_check item in haproxy_backends is set correctly
  ansible.builtin.assert:
    that:
      - item.http_check is mapping
    quiet: yes
  loop: "{{ haproxy_backends }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.http_check is defined

- name: assert | Test if http_check.send item in haproxy_backends is set correctly
  ansible.builtin.assert:
    that:
      - item.http_check.send is mapping
      - item.http_check.send.method is defined
      - item.http_check.send.method in [ "GET", "HEAD" ]
      - item.http_check.send.uri is defined
      - item.http_check.send.uri is not none
    quiet: yes
  loop: "{{ haproxy_backends }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.http_check.send is defined

- name: assert | Test if http_check.expect item in haproxy_backends is set correctly
  ansible.builtin.assert:
    that:
      - item.http_check.expect is string
      - item.http_check.expect is not none
    quiet: yes
  loop: "{{ haproxy_backends }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.http_check.expect is defined
