---
# tasks file for gitlab

- name: Import assert.yml
  ansible.builtin.import_tasks:
    file: assert.yml
  run_once: yes
  delegate_to: localhost
  become: no

- name: Install requirements
  ansible.builtin.package:
    name: "{{ gitlab_requirements }}"

- name: Install ruby to allow syntax check of gitlab.rb
  ansible.builtin.package:
    name: ruby
  notify:
    - Uninstall ruby

- name: Execute apt tasks
  when:
    - ansible_pkg_mgr == "apt"
  block:
    - name: Install apt repository key
      ansible.builtin.apt_key:
        url: "https://packages.gitlab.com/gpg.key"

    - name: Install apt repository
      ansible.builtin.apt_repository:
        repo: "deb {{ gitlab_repository_url }} {{ ansible_distribution_release | lower }} main"
        filename: "{{ gitlab_repository_name }}"

- name: Execute yum/dnf tasks
  when:
    - ansible_pkg_mgr in [ "dnf", "yum" ]
  block:
    - name: Install rpm repository key
      ansible.builtin.rpm_key:
        key: "https://packages.gitlab.com/gitlab/gitlab-{{ gitlab_distribution_abbreviation }}/gpgkey/gitlab-gitlab-{{ gitlab_distribution_abbreviation }}-3D645A26AB9FBD22.pub.gpg"

    - name: Install yum/dnf repository
      ansible.builtin.yum_repository:
        name: "{{ gitlab_repository_name }}"
        description: "{{ gitlab_repository_name }}"
        file: /etc/yum.repos.d/{{ gitlab_repository_name }}.repo
        baseurl: "{{ gitlab_repository_url }}"
        gpgcheck: yes
        sslverify: yes
        sslcacert: /etc/pki/tls/certs/ca-bundle.crt
        metadata_expire: "300"

- name: Check database migrations
  block:
    - name: Check if gitlab-rake is available
      ansible.builtin.command:
        cmd: gitlab-rake --version
      changed_when: no
      register: gitlab_rake_version
    - name: Use gitlab-rake to check db migrations
      ansible.builtin.command:
        cmd: "gitlab-rake db:migrate:status"
      changed_when: no
      register: gitlab_rake_database_migrations
      until: '"  down    " not in gitlab_rake_database_migrations.stdout'
      retries: "{{ gitlab_database_migrations_retries }}"
      delay: 60
      when:
        - gitlab_rake_version.rc == 0
  rescue:
    - name: Inform user of non-critical error
      ansible.builtin.debug:
        msg: "Could not check database migrations, continuing."

- name: Install gitlab
  ansible.builtin.package:
    name: "{{ gitlab_package }}"

- name: Configure ssl
  when:
    - gitlab_configuration_file is not defined
    - gitlab_letsencrypt is defined and not gitlab_letsencrypt
    - '"https" in gitlab_external_url'
  block:
    - name: Make ssl directories
      ansible.builtin.file:
        path: /etc/gitlab/ssl
        state: directory
        recurse: yes
        owner: root
        group: root
        mode: "0750"

    - name: Place ssl material
      when:
        - gitlab_ssl_crt is defined
        - gitlab_ssl_crt is not none
        - gitlab_ssl_key is defined
        - gitlab_ssl_key is not none
      block:
        - name: Place ssl certificate
          ansible.builtin.copy:
            src: "{{ gitlab_ssl_crt }}"
            dest: /etc/gitlab/ssl/{{ gitlab_external_url | urlsplit('hostname') }}.crt
            owner: root
            group: root
            mode: "0644"

        - name: Place ssl key
          ansible.builtin.copy:
            src: "{{ gitlab_ssl_key }}"
            dest: /etc/gitlab/ssl/{{ gitlab_external_url | urlsplit('hostname') }}.key
            owner: root
            group: root
            mode: "0640"

- name: Place configuration templated
  ansible.builtin.template:
    src: gitlab.rb.j2
    dest: /etc/gitlab/gitlab.rb
    owner: root
    group: root
    mode: "0600"
    validate: ruby -c %s
  notify:
    - Run gitlab-ctl reconfigure
  when:
    - gitlab_configuration_file is not defined

- name: Place trusted-certs
  when:
    - gitlab_trusted_certs is defined
    - gitlab_trusted_certs | length > 0
  block:
    - name: Make trusted-certs directories
      ansible.builtin.file:
        path: /etc/gitlab/trusted-certs
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Place trusted certificates
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/gitlab/trusted-certs/{{ item }}
        owner: root
        group: root
        mode: "0644"
      notify:
        - Run gitlab-ctl reconfigure
      loop: "{{ gitlab_trusted_certs }}"

- name: Place configuration static
  ansible.builtin.copy:
    src: "{{ gitlab_configuration_file }}"
    dest: /etc/gitlab/gitlab.rb
    owner: root
    group: root
    mode: "0600"
    validate: ruby -c %s
  notify:
    - Run gitlab-ctl reconfigure
  when:
    - gitlab_configuration_file is defined
    - gitlab_configuration_file is not none

- name: Show initial root password
  when:
    - gitlab_show_initial_root_password
  block:
    - name: Read initial root password
      ansible.builtin.slurp:
        src: /etc/gitlab/initial_root_password
      register: initial_root_password
    - name: Display initial root password
      ansible.builtin.debug:
        msg: "{{ initial_root_password['content'] | b64decode }}"
