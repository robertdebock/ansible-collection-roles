---
# tasks file for vault_no_package

- name: Include assert.yml
  ansible.builtin.import_tasks: assert.yml
  run_once: yes
  delegate_to: localhost

- name: Create Vault group {{ vault_group }}
  ansible.builtin.group:
    name: "{{ vault_group }}"
    system: yes

- name: Create Vault user {{ vault_user }}
  ansible.builtin.user:
    name: "{{ vault_user }}"
    create_home: no
    system: yes
    shell: "{{ vault_user_shell }}"
    group: "{{ vault_group }}"

- name: Create Vault download directory
  ansible.builtin.file:
    path: "{{ vault_download_path }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"

- name: Download Vault binary {{ vault_version }}
  ansible.builtin.unarchive:
    src: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_{{ vault_architecture }}.zip"
    dest: "{{ vault_download_path }}"
    creates: "{{ vault_download_path }}/vault"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0644"
    remote_src: yes

- name: Place vault.sh profile script
  ansible.builtin.template:
    src: vault.sh.j2
    dest: /etc/profile.d/vault.sh
    owner: root
    group: root
    mode: "0644"
    backup: yes

- name: Check if vault_path exists
  ansible.builtin.stat:
    path: "{{ vault_path }}"
  register: vault_check_path

- name: Create vault_path, set ownership if vault_path does not exists
  ansible.builtin.file:
    path: "{{ vault_path }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"
  when:
    - not vault_check_path.stat.exists

- name: Create directory in Vault directory
  ansible.builtin.file:
    path: "{{ vault_path }}/{{ item }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"
  loop: "{{ vault_directories }}"

- name: Copy Vault binary
  ansible.builtin.copy:
    src: "{{ vault_download_path }}/vault"
    dest: "{{ vault_path }}/bin/vault-{{ vault_version }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0775"
    remote_src: yes
  notify:
    - Step down

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

# - name: Register if vault.service file exists
#   ansible.builtin.stat:
#     path: "/etc/systemd/system/vault.service"
#   register: systemd_service_file

# - name: Stopping vault in case vault.service file exists
#   ansible.builtin.debug:
#     msg: "Stopping vault"
#   when: systemd_service_file.stat.exists
#   notify:
#     - Stop vault

# - name: Flush handlers
#   ansible.builtin.meta: flush_handlers

- name: Symlink Vault binary to {{ vault_version }}
  ansible.builtin.copy:
    src: "{{ vault_path }}/bin/vault-{{ vault_version }}"
    dest: "{{ vault_path }}/bin/vault"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0775"
    remote_src: yes
    force: true

- name: Place Vault configuration
  ansible.builtin.template:
    src: vault.hcl.j2
    dest: "{{ vault_path }}/etc/vault.d/vault.hcl"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0640"
    backup: yes
  notify:
    - Restart vault

- name: Place Vault license file
  ansible.builtin.copy:
    content: "{{ vault_license }}"
    dest: "{{ vault_path }}/etc/vault.d/vault.hclic"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0400"
    backup: yes
  notify:
    - Restart vault
  when:
    - vault_license is defined
    - vault_license | length > 0

# TODO: Not sure if this step is required.
# - name: Get information on Vault user
#   ansible.builtin.getent:
#     database: passwd
#     key: "{{ vault_user }}"

- name: Copy Vault service file
  ansible.builtin.template:
    src: vault.service.j2
    dest: "/etc/systemd/system/vault.service"
    owner: root
    group: root
    mode: "0644"
    backup: yes
  notify:
    - Daemon reload

- name: Enable and start the Vault service
  ansible.builtin.systemd:
    name: vault
    state: started
    enabled: true
  notify:
    - Unseal vault

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
