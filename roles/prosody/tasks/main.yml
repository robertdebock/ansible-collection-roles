---
# tasks file for prosody

- name: Import assert.yml
  ansible.builtin.import_tasks:
    file: assert.yml
  run_once: true
  delegate_to: localhost

- name: Alpine - Handle init system dependencies
  when:
    - ansible_os_family == "Alpine"
  block:
    - name: Alpine - Create machine-id if it doesn't exist
      ansible.builtin.copy:
        content: "{{ ansible_machine_id | default('0123456789abcdef0123456789abcdef') }}"
        dest: /etc/machine-id
        mode: "0644"

    - name: Alpine - Create minimal dev service script
      ansible.builtin.copy:
        content: |
          #!/sbin/openrc-run
          depend() {
            need net
          }
          start() {
            ebegin "Starting dev service"
            eend 0
          }
          stop() {
            ebegin "Stopping dev service"
            eend 0
          }
        dest: /etc/init.d/dev
        mode: "0755"

    - name: Alpine - Ensure OpenRC runlevel directory exists
      ansible.builtin.file:
        path: /etc/runlevels/default
        state: directory
        mode: "0755"

    - name: Alpine - Add dev service to default runlevel
      ansible.builtin.file:
        src: /etc/init.d/dev
        dest: /etc/runlevels/default/dev
        state: link
      failed_when: false

- name: Install prosody
  ansible.builtin.package:
    name: "{{ prosody_packages }}"
    state: present

- name: Create prosody directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ prosody_user }}"
    group: "{{ prosody_group }}"
    mode: "0755"
  loop:
    - "{{ prosody_data_directory }}"
    - "{{ prosody_log_directory }}"
    - "{{ prosody_config_directory }}/conf.d"
    - "{{ prosody_pidfile | dirname }}"

- name: Configure prosody
  ansible.builtin.template:
    src: prosody.cfg.lua.j2
    dest: "{{ prosody_config_directory }}/prosody.cfg.lua"
    owner: "{{ prosody_user }}"
    group: "{{ prosody_group }}"
    mode: "0644"
  notify:
    - Validate prosody configuration
    - Restart prosody

- name: Import ssl.yml
  ansible.builtin.import_tasks:
    file: ssl.yml
  when:
    - prosody_https_enable

- name: Import vhosts.yml
  ansible.builtin.import_tasks:
    file: vhosts.yml
  when:
    - prosody_vhosts is defined

- name: Import components.yml
  ansible.builtin.import_tasks:
    file: components.yml
  when:
    - prosody_components_enable
    - prosody_components is defined

- name: Import muc.yml
  ansible.builtin.import_tasks:
    file: muc.yml
  when:
    - prosody_muc_enable

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Start and enable prosody (non-Alpine)
  ansible.builtin.service:
    name: "{{ prosody_service }}"
    state: started
    enabled: true
  when: ansible_os_family != "Alpine"

- name: Alpine - Check if prosody is running
  ansible.builtin.command:
    cmd: "{{ prosody_binary }} status"
  register: prosody_alpine_status_check
  failed_when: false
  changed_when: false
  when: ansible_os_family == "Alpine"

- name: Alpine - Start prosody if not running
  ansible.builtin.command:
    cmd: "{{ prosody_binary }} start"
  register: prosody_alpine_start
  changed_when:
    - prosody_alpine_start.rc == 0
    - "'already running' not in prosody_alpine_start.stdout"
  failed_when: false
  when:
    - ansible_os_family == "Alpine"
    - prosody_alpine_status_check.rc != 0
