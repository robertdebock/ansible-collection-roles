---
# tasks file for cups

- name: Import assert.yml
  ansible.builtin.import_tasks:
    file: assert.yml
  run_once: yes
  delegate_to: localhost

- name: Install packages
  ansible.builtin.package:
    name: cups
    state: present

- name: Disable AppArmor cups profile
  when:
    - ansible_distribution == "Ubuntu"
  notify:
    - Reload disabled AppArmor cups profile
  block:
    - name: Check if AppArmor cups profile is enabled
      ansible.builtin.stat:
        path: /etc/apparmor.d/usr.sbin.cupsd
      register: cups_apparmor_file

    - name: Check of AppArmon disable is available
      ansible.builtin.stat:
        path: /etc/apparmor.d/disable
      register: cups_apparmor_disable

    - name: Disable AppArmor cups profile
      ansible.builtin.file:
        src: /etc/apparmor.d/usr.sbin.cupsd
        dest: /etc/apparmor.d/disable/usr.sbin.cupsd
        state: link
      when:
        - cups_apparmor_file.stat.exists
        - cups_apparmor_disable.stat.exists

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Configure cups
  ansible.builtin.template:
    src: cupsd.conf.j2
    dest: /etc/cups/cupsd.conf
    mode: "0640"
    validate: cupsd -t -s /etc/cups/cups-files.conf -c %s
  notify:
    - Restart cups

- name: Enable AppArmor cups profile
  ansible.builtin.file:
    path: /etc/apparmor.d/disable/usr.sbin.cupsd
    state: absent
  when:
    - ansible_distribution == "Ubuntu"
  notify:
    - Load the AppArmor cups profile

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Add printers
  ansible.builtin.command:
    cmd: "lpadmin -p '{{ item.name }}' -v {{ item.uri }} -m everywhere"
  loop: "{{ cups_printers }}"
  loop_control:
    label: "{{ item.name }}"

- name: Start and enable software
  ansible.builtin.service:
    name: "{{ cups_service }}"
    state: started
    enabled: yes
