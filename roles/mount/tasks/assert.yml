---

- name: assert | Test mount_default_mode
  ansible.builtin.assert:
    that:
      - mount_default_mode is defined
      - mount_default_mode is string
      - mount_default_mode is not none
    quiet: yes

- name: assert | Test mount_default_owner
  ansible.builtin.assert:
    that:
      - mount_default_owner is defined
      - mount_default_owner is string
      - mount_default_owner is not none
    quiet: yes

- name: assert | Test mount_default_group
  ansible.builtin.assert:
    that:
      - mount_default_group is defined
      - mount_default_group is string
      - mount_default_group is not none
    quiet: yes

- name: assert | Test mount_requests
  ansible.builtin.assert:
    that:
      - mount_requests is defined
      - mount_requests is iterable
    quiet: yes
  when:
    - mount_requests is defined

- name: assert | Test item.backup in mount_requests
  ansible.builtin.assert:
    that:
      - item.backup is boolean
    quiet: yes
  loop: "{{ mount_requests }}"
  loop_control:
    label: "{{ item.path }}"
  when:
    - item.backup is defined

- name: assert | Test item.boot in mount_requests
  ansible.builtin.assert:
    that:
      - item.boot is boolean
    quiet: yes
  loop: "{{ mount_requests }}"
  loop_control:
    label: "{{ item.path }}"
  when:
    - item.boot is defined

- name: assert | Warn if item.fstype in mount_requests is set incorrectly
  block:
    - name: assert | Test item.fstype in mount_requests
      ansible.builtin.assert:
        that:
          - item.fstype is string
          - item.fstype in [ "ext3", "ext4", "iso9660", "nfs", "none", "swap", "xfs" ]
        quiet: yes
      loop: "{{ mount_requests }}"
      loop_control:
        label: "{{ item.path }}"
      when:
        - item.fstype is defined
  rescue:
    - name: assert | Warn about unknown filesystem
      ansible.builtin.debug:
        msg: "The filesystem you have specified in unknown, proceeding."

- name: assert | Test item.path in mount_requests
  ansible.builtin.assert:
    that:
      - item.path is defined
      - item.path is string
      - item.path is not none
    quiet: yes
  loop: "{{ mount_requests }}"
  loop_control:
    label: "{{ item.path }}"

- name: assert | Test item.state in mount_requests
  ansible.builtin.assert:
    that:
      - item.state is string
      - item.state in [ "absent", "mounted", "present", "remounted", "unmounted" ]
    quiet: yes
  when:
    - item.state is defined
  loop: "{{ mount_requests }}"
  loop_control:
    label: "{{ item.path }}"
